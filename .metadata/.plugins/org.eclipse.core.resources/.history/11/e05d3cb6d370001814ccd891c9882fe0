'''
Created on 12 de jun de 2018

@author: 155 X-MX
'''
from pathlib import Path
import os.path


def fileLines():
    data_folder = Path("C:/Users/155 X-MX/Desktop/Preenche Servicos")
     
    file_to_open = data_folder / "dados.txt"
     
    f = open(file_to_open,"r")
     
    if not file_to_open.exists():
        print("Oops, file doesn't exist!")
    else:
        print("Yay, the file exists!")
         
    #f.seek(0)
    # Getting all lines    
    all_lines = f.readlines()
    print('lines len: ', str(len(all_lines)))
    return all_lines

def occurred_cases(full_vector):
    
    ret_vector = []
    
    for item in full_vector:
        if not item[2] in ret_vector:
            ret_vector.append(item[2])
            #print("Inserting element")
    
    
    return ret_vector

def occurred_cases2(full_vector):
    
    ret_vector = []
    services_occurred = []
    
    for item in full_vector:
        service = item[0][2]
        if not service in services_occurred:
            services_occurred.append(service)
            ret_vector.append(item)
            #print("Inserting element")
    
    
    return ret_vector



def req_and_res(full_vector):
    
    ret_vector = []
    aux = []
    # getting just even positions Ex: 0,2,4,...
    only_requests = full_vector[::2]
    # getting just odd positions Ex: 1,3,5,...
    only_responses = full_vector[1::2]
    
    if not len(only_requests) == len(only_responses):
        print('Full vec size: ' + str(len(full_vector)))
        print('requests vec size: ' + str(len(only_requests))+ '  '+ 'responses vec size: ' + str(len(only_responses))) 
        print("different lists sizes")
        print("remove last position from requests vector")
        only_requests.pop()
        
    
        
    for position, request_element in enumerate(only_requests):
        #print (request_element)
        #print (only_responses[position])
        aux.append(request_element)
        aux.append(only_responses[position])
        #print (aux)
        ret_vector.append(list(aux))
        del aux[:]
        
    
    return ret_vector


##########
response_values = ['4','5','6','7'] # values with third bit enable Ex: 0101

# Getting all lines from file dados.txt
lines = fileLines()
# if the first line from file dados.txt is not valid pop it
if not lines[0][0].isdigit(): # Check if the first position in first line is a digit 
    if lines[0][0] in response_values: # Check if the first position in first line is a request
        lines.pop(0) # if not pop the first line
# Getting symbol of empty that is in the lines
items = lines[0].split(' ')
    
separator = items[1]

# Lists
new_items = []
positions = []
# List of lists. Each position is a list that contains line informations from dados.txt 
final_list = []

print('lines len: ', str(len(lines)))
for line in lines:
    #print("line: ", line[:-1])
 
    # separating items by space
    items = line.split(' ')
    #print(items)
 
    # creating new line list without separators
    for item in items:
        if item != separator:
            new_items.append(item)
     
    #print(new_items)
    # removing \n from the last list item
    data = new_items[2][:-1]
    new_items[2] = data
     
    #print(new_items)
    # appending processed line to a final list        
    final_list.append(list(new_items))
     
    # cleaning list, makes the list be empty
    del new_items[:]
 
for b,i in enumerate(final_list):
    print (i,b)

# open file
data_folder = Path("C:/Users/155 X-MX/Desktop/")
file_to_open = data_folder / "test123.txt"
f = open(file_to_open,"w")
 
for line in final_list:
    # wrinting line to the file
    str_line = line[0]+line[1]+line[2]+'\n'
    f.write(str_line)
 
# closing file
f.close()   

######
#vec = [['1','2','3'],['1','2','4'],['1','2','1'],['1','2','3']]

# getting just even positions Ex: 0,2,4,...
only_requests = final_list[::2]
# getting just odd positions Ex: 1,3,5,...
only_responses = final_list[1::2]

req_vector = occurred_cases(only_requests)
#print (req_vector)

for i in req_vector:
    print (i)
    
    




#####
req_and_res_vec = req_and_res(final_list)
if req_and_res_vec == 0:
    print('finishing app....')
    quit()
req_and_res_vec = occurred_cases2(req_and_res_vec)



# Getting requests that already occurred
# open file
data_folder = Path("C:/Users/155 X-MX/Desktop/")
file_to_open = data_folder / "occurred requests.txt"
requests_already_got = []
#checking if the file already exists
if os.path.isfile(file_to_open): 
    f = open(file_to_open,"r")
    
    # Getting all lines    
    requests_already_got = f.readlines()
    
    f.close() 

# recording cases in a file

# open file
data_folder = Path("C:/Users/155 X-MX/Desktop/")
file_to_open = data_folder / "occurred requests.txt"
f = open(file_to_open,"a")
 
for line in req_vector:
    # checking if the request already occurred
    # if not, insert this request at file occurred requests.txt
    if not line+'\n' in requests_already_got:
        # wrinting line to the file
        str_line = line + '\n'
        f.write(str_line)
 
# closing file
f.close() 





# open file
occurred_cases2(req_and_res_vec)
data_folder = Path("C:/Users/155 X-MX/Desktop/")
file_to_open = data_folder / "req_res.txt"
f = open(file_to_open,"a")
 
for line in req_and_res_vec:
    # wrinting line to the file
    if not str(line[0][2])+'\n' in requests_already_got:
        str_line = 'req: '+str(line[0][2])+' res: '+str(line[1][2])+'\n'
        print('Inserting: ',line[0][2])
        f.write(str_line)
 
# closing file
f.close()  

#===============================================================================
# for i in occurred_cases2(req_and_res_vec):
#     print (i)
#===============================================================================
