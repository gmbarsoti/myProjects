'''
Created on 25 de jun de 2018

@author: 155 X-MX
'''
from subprocess import run, PIPE
from pathlib import Path
import xml.etree.ElementTree as ET


class captured_config:
    #===========================================================================
    # captor = "Unknow" #who did the capture
    # user = "Unknow" 
    # os = "Unknow" # Operating System used to do the capture
    # date = "Unknow"
    # time = "Unknow"
    #===========================================================================
    Type = "Unknow" 
    PinX = "Unknow" 
    PinY = "Unknow"
    BaudRate = "Unknow"
    Info = "Unknow"
    Total_lines = "Unknow"
         
    def __init__(self, dict):
        if 'Type' in dict:
            self.Type = dict["Type"]
        if 'PinX' in dict:
            self.PinX = dict["PinX"]
        if 'PinY' in dict:
            self.PinY = dict["PinY"]
        if 'BaudRate' in dict:
            self.BaudRate = dict["BaudRate"]
        if 'Info' in dict:
            self.Info = dict["Info"] 
        #=======================================================================
        # if len(cap_info) == 0:
        #     print("Missing parameters to class capture")
        # else:
        #     if 'captor' in cap_info: 
        #         self.captor = cap_info['captor']
        #     if 'user' in cap_info:
        #         self.user = cap_info['user']
        #     if 'os' in cap_info:
        #         self.os = cap_info['os']
        #     if 'date' in cap_info:
        #         self.date = cap_info['date']
        #     if 'time' in cap_info:
        #         self.time = cap_info['time']
        #=======================================================================
            
    def printInfo(self):
        #=======================================================================
        # print("Captor: ", self.captor)
        # print("User: ", self.user)
        # print("Operating System: ", self.os)
        # print("Date: ", self.date)
        # print("Time: ", self.time)
        #=======================================================================
        print("Type: ", self.Type)
        print("PinX: ", self.PinX)
        print("PinY: ", self.PinY)
        print("BaudRate: ", self.BaudRate)
        print("Info: ", self.Info)
        print("lines number: ", self.Total_lines)


def generate_xml(cap_file):
    data_folder = Path("D:/sand_box/")
    program_path = data_folder / "ProtocolAnalyzerSaveXml.exe"
    
    data_folder = Path("D:/sand_box/")
    
    cap_path = data_folder / cap_file
    print(program_path)
    print (cap_path)
    run_return = run([str(program_path),str(cap_path)], stdout=PIPE)



def xml_treatment():
    data_folder = Path("D:/sand_box/")
    program_path = data_folder /  "InitGscan.xml"
    
    tree = ET.parse(program_path)
    root = tree.getroot()
    
    
    dict = {}
    a = root.find('Config')
    for b in a[1].iter():
        if not str(b.text) == "None":
            dict[b.tag] = b.text
    dict["Total_lines"] = a.find("Total").text
    a = dict["Total_lines"]
    print(a)
    a_class = captured_config(dict)
    a_class.printInfo()
    
def main():
    
    cap_file = "InitGscan.ctec"
    generate_xml(cap_file)
    
    xml_treatment()
    
    
    
if __name__ == "__main__":
    main()